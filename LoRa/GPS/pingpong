#include "LoRaWan_APP.h"
#include "Arduino.h"

// OLED DISPLAY: Just for tests
#include <Wire.h>
#include "HT_SSD1306Wire.h"
#include "HT_DisplayUi.h"

#include <HT_TinyGPS++.h>

// Define the RX and TX pins for Serial 2
#define RXD2 46
#define TXD2 45

#define GPS_BAUD 9600

// The TinyGPS++ object
TinyGPSPlus gps;

// Create an instance of the HardwareSerial class for Serial 2
HardwareSerial gpsSerial(2);

#define RF_FREQUENCY                                915000000 // Hz

#define TX_OUTPUT_POWER                             20        // dBm

#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       12         // [SF7..SF12]
#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         0         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false


#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 30 // Define the payload size here

char txpacket[BUFFER_SIZE];
char rxpacket[BUFFER_SIZE];

//double txNumber;

float latitude;
float longitude; 
bool gps_valid;

// OLED DISPLAY

#ifdef WIRELESS_STICK_V3
static SSD1306Wire display(0x3c, 500000, SDA_OLED, SCL_OLED, GEOMETRY_64_32, RST_OLED);  // addr , freq , i2c group , resolution , rst
#else
static SSD1306Wire display(0x3c, 500000, SDA_OLED, SCL_OLED, GEOMETRY_128_64, RST_OLED);  // addr , freq , i2c group , resolution , rst
#endif

static RadioEvents_t RadioEvents;
void OnTxDone( void );
void OnTxTimeout( void );
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr );

typedef enum
{
    LOWPOWER,
    STATE_RX,
    STATE_TX
}States_t;

int16_t txNumber;
States_t state;
bool sleepMode = false;
int16_t Rssi,rxSize,Snr;


void setup() {

  Serial.begin(115200);

    // Start Serial 2 with the defined RX and TX pins and a baud rate of 9600
  gpsSerial.begin(GPS_BAUD, SERIAL_8N1, RXD2, TXD2);
  Serial.println("Serial 2 started at 9600 baud rate");
  Mcu.begin(HELTEC_BOARD,SLOW_CLK_TPYE);
  txNumber=0;
  Rssi=0;

  RadioEvents.TxDone = OnTxDone;
  RadioEvents.TxTimeout = OnTxTimeout;
  RadioEvents.RxDone = OnRxDone;

  Radio.Init( &RadioEvents );
  Radio.SetChannel( RF_FREQUENCY );
  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                                   LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );

    Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );
    state=STATE_TX;

  display.init();
  display.drawString(0, 0, "RSSI tests");
  display.drawString(0, 10, "MANGROVESCOPE");
  display.drawString(0, 30, "Ping pong");
  display.display();
  delay(7000);
  display.clear();
}



void loop(){

  // This sketch displays information every time a new sentence is correctly encoded.
  unsigned long start = millis();
  
  while (millis() - start < 1000) {
    while (gpsSerial.available() > 0) {
      gps.encode(gpsSerial.read());
    }
    if (gps.location.isUpdated()) {
        
      //Serial.print("LAT: ");
      //Serial.println(gps.location.lat(), 6);
      //Serial.print("LONG: "); 
      //Serial.println(gps.location.lng(), 6);

      latitude = gps.location.lat(), 6;
      longitude = gps.location.lng(), 6;
    }
      switch(state){
        case STATE_TX:
          delay(1000);
          txNumber++;
          //sprintf(txpacket,"hello %d, Rssi : %d",txNumber,Rssi);
          snprintf(txpacket, BUFFER_SIZE, "%.6f,%.6f, \nPacket # %d", latitude, longitude, txNumber);
          Serial.printf("\r\nsending packet \"%s\" , length %d\r\n",txpacket, strlen(txpacket));
          Radio.Send( (uint8_t *)txpacket, strlen(txpacket) );
          display.drawString(0, 0, "TX mode");
          display.drawString(0, 25, "Sending package # ");
          display.drawString(100, 25, String(txNumber));
          display.display();
          delay(1500);
          display.clear();
          state=LOWPOWER;
          
          break;
        case STATE_RX:
          Serial.println("into RX mode");
          Radio.Rx( 0 );
          state=LOWPOWER;
          

          // display.drawString(0, 0, "Package # ");
          // display.drawString(50, 0, String(rxpacket));
          display.drawString(0, 20, "RSSI = ");
          display.drawString(40, 20, String(Rssi));
          display.drawString(60, 20, "dBm");
      

          display.drawString(0, 30, "SNR = ");
          display.drawString(40, 30, String(Snr));
          display.drawString(0, 50, rxpacket);
          delay(1000);
          display.display();
          break;
        case LOWPOWER:
          Radio.IrqProcess( );
          break;
        default:
          break;
      }
  }
}

void OnTxDone( void )
{
  Serial.print("TX done......");
  state=STATE_RX;
}

void OnTxTimeout( void )
{
    Radio.Sleep( );
    Serial.print("TX Timeout......");
    state=STATE_TX;
}

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
    Rssi=rssi;
    Snr = snr;
    rxSize=size;
    memcpy(rxpacket, payload, size );
    rxpacket[size]='\0';
    Radio.Sleep( );

    Serial.printf("\r\nreceived packet \"%s\" with Rssi %d , length %d\r\n",rxpacket,Rssi,rxSize);
    Serial.println("wait to send next packet");

    state=STATE_TX;
}
